{
    "defmodule": {
        "prefix": "defmod",
        "body": ["defmodule ${1:module} do", "  $0", "end"],
        "description": "Define a module"
    },
    "def": {
        "prefix": "def-no-args",
        "body": ["def ${1:name}() do", "  $0", "end"],
        "description": "Define a function"
    },
    "defa": {
        "prefix": "def-args",
        "body": ["def ${1:name}(${2:args}) do", "  $0", "end"],
        "description": "Define a function with arguments"
    },
    "defp": {
        "prefix": "defp",
        "body": ["defp ${1:name}() do", "  $0", "end"],
        "description": "Define a private function"
    },
    "defpa": {
        "prefix": "defp-args",
        "body": ["defp ${1:name}(${2:args}) do", "  $0", "end"],
        "description": "Define a private function with arguments"
    },
    "df": {
        "prefix": "def-one-liner",
        "body": "def ${1:name}(), do: $0",
        "description": "Define a one-liner function"
    },
    "dfa": {
        "prefix": "def-one-liner-args",
        "body": "def ${1:name}(${2:args}), do: $0",
        "description": "Define a one-liner function with arguments"
    },
    "dfw": {
        "prefix": "def-one-liner-guard-clause",
        "body": "def ${1:name}(${2:args}) when ${3:guard}, do: $0",
        "description": "Define a one-liner function with when guard"
    },
    "IO.puts": {
        "prefix": "put",
        "body": "IO.puts($0)"
    },
    "IO.inspect": {
        "prefix": "ins",
        "body": "IO.inspect($0)"
    },
    "IO.inspect with label": {
        "prefix": "insl",
        "body": "IO.inspect($1, label: \"$0\")"
    },
    "if .. do .. end": {
        "prefix": "if",
        "body": ["if ${1:condition} do", "  $0", "end"]
    },
    "if .. do:": {
        "prefix": "if:",
        "body": "if ${1:condition}, do: $0"
    },
    "if .. do .. else .. end": {
        "prefix": "ife",
        "body": ["if ${1:condition} do", "  $2", "else", "  $0", "end"]
    },
    "if .. do: .. else:": {
        "prefix": "ife:",
        "body": "if ${1:condition}, do: $2, else: $0"
    },
    "cond": {
        "prefix": "cond",
        "body": ["cond do", "  $1 -> ", "  $0", "end"]
    },
    "case": {
        "prefix": "case",
        "body": ["case $1 do", "  $2 -> ", "    $0", "end"]
    },
    "for": {
        "prefix": "for",
        "body": ["for ${1:item} <- ${2:items} do", "  $0", "end"]
    },
    "def + doc": {
        "prefix": "def-doc",
        "body": [
            "@doc \"\"\"",
            "${1:doc}",
            "\"\"\"",
            "def ${2:name} do",
            "  $0",
            "end"
        ]
    },
    "def + spec": {
        "prefix": "def-spec",
        "body": [
            "@spec ${1:name}(${2:args}) :: ${3:no_return}",
            "def $1{4:args} do",
            "  $0",
            "end"
        ]
    },
    "def + doc + spec": {
        "prefix": "def-doc-spec",
        "body": [
            "@doc \"\"\"",
            "${1:doc}",
            "\"\"\"",
            "@spec ${2:name}(${3:args}) :: ${4:no_return}",
            "def $2{5:args} do",
            "  $0",
            "end"
        ]
    },
    "do": {
        "prefix": "do",
        "body": ["do", "  $0", "end"]
    },
    "doc": {
        "prefix": "doc",
        "body": ["@doc \"\"\"", "$0", "\"\"\""]
    },
    "doc s": {
        "prefix": "doc-s",
        "body": ["@doc ~S\"\"\"", "$0", "\"\"\""]
    },
    "doc false": {
        "prefix": "doc-false",
        "body": "@doc false"
    },
    "moduledoc": {
        "prefix": "module-doc",
        "body": ["@moduledoc \"\"\"", "$0", "\"\"\""]
    },
    "moduledoc s": {
        "prefix": "module-doc-s",
        "body": ["@moduledoc ~S\"\"\"", "$0", "\"\"\""]
    },
    "moduledoc false": {
        "prefix": "mdocf",
        "body": "@moduledoc false"
    },
    "require": {
        "prefix": "req",
        "body": "require ${0:Logger}"
    },
    "test": {
        "prefix": "test",
        "body": ["test \"${1:name}\" do", "  $0", "end"]
    },
    "des": {
        "prefix": "desc",
        "body": ["describe \"${1:test group subject}\" do", "  $0", "end"]
    },
    "IEx.pry": {
        "prefix": "pry",
        "body": ["require IEx; IEx.pry", "$0"]
    },
    "pipe char": {
        "prefix": ">pipe-character",
        "body": "|> $0"
    },
    "pipe into each": {
        "prefix": ">each",
        "body": "|> Enum.each($0)"
    },
    "pipe into map": {
        "prefix": ">map",
        "body": "|> Enum.map($0)"
    },
    "pipe into filter": {
        "prefix": ">filter",
        "body": "|> Enum.filter($0)"
    },
    "pipe into reduce": {
        "prefix": ">reduce",
        "body": "|> Enum.reduce(${1:acc}, fn ${2}, ${3:acc} -> $0 end)"
    },
    "word list": {
        "prefix": "wordlist",
        "body": "~w($0)"
    },
    "atom list": {
        "prefix": "atomlist",
        "body": "~w($0)a"
    },
    "insp": {
        "prefix": "insp",
        "body": "IO.inspect(self(), label: \"${0:label}\")",
        "description": "Inspect process with a label"
    },
    "map": {
        "prefix": "map",
        "body": "%{\"${1}\" => ${2}}${0}",
        "description": "Elixir map"
    },
    "lv_mount_atom_and_value": {
        "prefix": "mount-atom+value",
        "body": [
            "def mount(_params, _session, socket) do",
            "  socket = assign(socket, :${1:key}, ${2:value})",
            "  {:ok, socket}",
            "end"
        ],
        "description": "LiveView mount function, socket with atom and value"
    },
    "lv_mount_atom_and_value_with_args": {
        "prefix": "mount-atom+value-args",
        "body": [
            "def mount(${1:_params}, ${2:_session}, socket) do",
            "  socket = assign(socket, :${3:key}, ${4:value})",
            "  {:ok, socket}",
            "end"
        ],
        "description": "LiveView mount function, socket with atom and value and arguments"
    },
    "lv_mount_keyword_list": {
        "prefix": "mount-keyword-list",
        "body": [
            "def mount(_params, _session, socket) do",
            "  socket =",
            "    assign(socket,",
            "      ${1:key}: ${2:value}",
            "    )",
            "",
            "  {:ok, socket}",
            "end"
        ],
        "description": "LiveView mount function, socket with multi-line keyword list"
    },
    "lv_mount_keyword_list_with_args": {
        "prefix": "mount-keyword-list-args",
        "body": [
            "def mount(${1:_params}, ${2:_session}, socket) do",
            "  socket =",
            "    assign(socket,",
            "      ${1:key}: ${2:value}",
            "    )",
            "",
            "  {:ok, socket}",
            "end"
        ],
        "description": "LiveView mount function, socket with multi-line keyword list and arguments"
    },
    "lv_render": {
        "prefix": "render-with-heex",
        "body": [
            "def render(assigns) do",
            "  ~H\"\"\"",
            "  ${0}",
            "  \"\"\"",
        "end"
        ],
        "description": "LiveView render function"
    },
    "lv_heex": {
        "prefix": "heex-template",
        "body": [
            "~H\"\"\"",
            "${0}",
            "\"\"\""
        ],
        "description": "LiveView HEEx template"
    },
    "lv_handle_event": {
        "prefix": "handle-event-noop",
        "body": [
            "def handle_event(${1:event}, _, socket) do",
            "  {:noreply, socket}",
            "end"
        ],
        "description": "LiveView handle_event function"
    },
    "lv_handle_event1": {
        "prefix": "handle-event-assign",
        "body": [
            "def handle_event(${1:event}, _, socket) do",
            "  socket = assign(socket, ${2:key}: ${3:value})",
            "  {:noreply, socket}",
            "end"
        ],
        "description": "LiveView handle_event function, with keyword list"
    },
    "lv_handle_event1.5": {
        "prefix": "handle-event-assign-with-params",
        "body": [
            "def handle_event(${1:event}, ${2:_params}, socket) do",
            "  socket = assign(socket, ${3:key}: ${4:value})",
            "  {:noreply, socket}",
            "end"
        ],
        "description": "LiveView handle_event function, with keyword list and params"
    },
    "lv_handle_info": {
        "prefix": "handle-info-noop",
        "body": [
            "def handle_info(${1:message}, socket) do",
            "  {:noreply, socket}",
            "end"
            ],
        "description": "LiveView handle_info function"
    },
    "lv_handle_info1": {
        "prefix": "handle-info-assign-kv",
        "body": [
            "def handle_info(${1:message}, socket) do",
            "  socket = assign(socket, ${2:key}: ${3:value})",
            "  {:noreply, socket}",
            "end"
        ],
        "description": "LiveView handle_info function with key-value"
    },
    "lv_handle_info2": {
        "prefix": "handle-info-assign-keyword-list",
        "body": [
            "def handle_info(${1:message}, socket) do",
            "  socket =",
            "    assign(socket,",
            "      ${2:key}: ${3:value}",
            "    )",
            "",
            "  {:noreply, socket}",
            "end"
        ],
        "description": "LiveView handle_info function with keyword list"
    },
    "lv_handle_params": {
        "prefix": "handle-par",
        "body": [
            "def handle_params(${1:params}, _uri, socket) do",
            "  {:noreply, socket}",
            "end"
            ],
        "description": "LiveView handle_params function"
    },
    "lv_function_component": {
        "prefix": "func-comp",
        "body": [
            "def ${1:name}(assigns) do",
            "  ~H\"\"\"",
            "  ${2}",
            "  \"\"\"",
        "end"
        ],
        "description": "LiveView function component"
        },
    "lv_assign": {
        "prefix": "assign-one-liner-kv",
        "body": "socket = assign(socket, :${1:key}, ${2:value})",
        "description": "LiveView assign one-liner key-value"
        },
    "lv_assign2": {
        "prefix": "assign-multi-line-kwl",
        "body": [
            "socket =",
            "  assign(socket,",
            "    ${1:key}: ${2:value}",
            "  )"
        ],
        "description": "LiveView assign multi-line keyword list"
    },
    "use_lv": {
        "prefix": "use-live-view",
        "body": "use ${WORKSPACE_NAME/(.*)/${1:/pascalcase}/g}Web, :live_view",
        "description": "Use :live_view"
    }
}
